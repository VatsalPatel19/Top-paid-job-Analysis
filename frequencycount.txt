package FirstFolder;
import java.io.*;
import java.util.*;

class AVL_Node {
    String word;
    int count;
    int hieght;
    AVL_Node left, right;

    public AVL_Node(String word) {
        this.word = word;
        this.count = 1;
        this.hieght = 1;
        this.left = this.right = null;
    }
}

class AVL_Tree {
    private AVL_Node root;

    public AVL_Tree() {
        this.root = null;
    }

    private int hieght(AVL_Node node) {
        return (node != null) ? node.hieght : 0;
    }

    private int get_Balance(AVL_Node node) {
        return (node != null) ? hieght(node.left) - hieght(node.right) : 0;
    }

    private AVL_Node rotateRight(AVL_Node v) {
        AVL_Node n = v.left;
        AVL_Node T2 = n.right;

        n.right = v;
        v.left = T2;

        v.hieght = Math.max(hieght(v.left), hieght(v.right)) + 1;
        n.hieght = Math.max(hieght(n.left), hieght(n.right)) + 1;

        return n;
    }

    private AVL_Node rotateLeft(AVL_Node n) {
        AVL_Node v = n.right;
        AVL_Node T2 = v.left;

        v.left = n;
        n.right = T2;

        n.hieght = Math.max(hieght(n.left), hieght(n.right)) + 1;
        v.hieght = Math.max(hieght(v.left), hieght(v.right)) + 1;

        return v;
    }

    public void insert(String word) {
        root = insert(root, word);
    }

    private AVL_Node insert(AVL_Node node, String word) {
        if (node == null) {
            return new AVL_Node(word);
        }

        int compareResult = word.compareTo(node.word);

        if (compareResult < 0) {
            node.left = insert(node.left, word);
        } else if (compareResult > 0) {
            node.right = insert(node.right, word);
        } else {
            node.count++;
            return node;
        }

        node.hieght = 1 + Math.max(hieght(node.left), hieght(node.right));

        int balance = get_Balance(node);

  
        if (balance > 1 && word.compareTo(node.left.word) < 0) {
            return rotateRight(node);
        }

 
        if (balance < -1 && word.compareTo(node.right.word) > 0) {
            return rotateLeft(node);
        }

    
        if (balance > 1 && word.compareTo(node.left.word) > 0) {
            node.left = rotateLeft(node.left);
            return rotateRight(node);
        }

    
        if (balance < -1 && word.compareTo(node.right.word) < 0) {
            node.right = rotateRight(node.right);
            return rotateLeft(node);
        }

        return node;
    }

    public void printInOrder() {
        printInOrder(root);
    }

    private void printInOrder(AVL_Node root) {
        if (root != null) {
            printInOrder(root.left);
            System.out.println(root.word + ": " + root.count);
            printInOrder(root.right);
        }
    }

    public int search(String word) {
        return search(root, word);
    }

    private int search(AVL_Node root, String word) {
        if (root == null) {
            return 0;
        }

        int compareResult = word.compareTo(root.word);

        if (compareResult < 0) {
            return search(root.left, word);
        } else if (compareResult > 0) {
            return search(root.right, word);
        } else {
            return root.count;
        }
    }
}

public class ferquencycount {

    public static void main(String[] args) {
        ferquencycount wordCounter = new ferquencycount();
        wordCounter.wordCount();
    }

    public void wordCount() {
        AVL_Tree avlTree = new AVL_Tree();
        Scanner scanner = new Scanner(System.in);

        String[] file_Paths = {
            "C:\\Users\\vksp1\\eclipse-workspace\\ScrapeAss3\\src\\indeed.txt",
            "C:\\Users\\vksp1\\eclipse-workspace\\ScrapeAss3\\src\\monster.txt",
            "C:\\Users\\vksp1\\eclipse-workspace\\ScrapeAss3\\src\\randstand.txt"
        };

        System.out.print("Enter the word to search: ");
        String word_To_Search = scanner.nextLine();

       
        Map<String, Integer> file_Frequency_Map = new HashMap<>();

        for (String file_Path : file_Paths) {
            int frequ_ency = countWordFrequency(file_Path, avlTree, word_To_Search);
            file_Frequency_Map.put(file_Path, frequ_ency);
        }

        for (Map.Entry<String, Integer> entry : file_Frequency_Map.entrySet()) {
            String file_Path = entry.getKey();
            int frequency = entry.getValue();
            System.out.println("Frequency of \"" + word_To_Search + "\" in " + file_Path + ": " + frequency);
        }
        
        System.out.print("\nDo you want to check another word? (yes/no): ");
        String cont_Rank = scanner.nextLine().toLowerCase();
        if (cont_Rank.equals("yes")) {
        	wordCount(); 
        } else {
            System.out.println("Exiting the data validator. Goodbye!");
        }
    }

    private int countWordFrequency(String filePath, AVL_Tree avlTree, String wordToSearch) {
        int fileFrequency = 0;

        try (BufferedReader readre = new BufferedReader(new FileReader(filePath))) {
            String line1;
            while ((line1 = readre.readLine()) != null) {
                String[] words = line1.split("\\s+");
                for (String word : words) {
                    
                    word = word.replaceAll("[^a-zA-Z]", "").toLowerCase();
                    if (!word.isEmpty()) {
                        avlTree.insert(word);
                        if (word.equals(wordToSearch)) {
                            fileFrequency++;
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return fileFrequency;
    }
}
